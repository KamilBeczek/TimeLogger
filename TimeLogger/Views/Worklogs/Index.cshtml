@model TimeLogger.Models.WorklogViewModel

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Worklogs</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }

        table, th, td {
            border: 1px solid black;
        }

        th, td {
            padding: 8px;
            text-align: left;
        }

        form {
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <h1>Worklogs</h1>

    <!-- Formularz filtrowania według daty, osoby i zespołu -->
    <form method="get" action="@Url.Action("Index")">
        <label for="startDate">Start Date:</label>
        <input type="date" id="startDate" name="startDate" value="@((ViewData["StartDate"] as DateTime?)?.ToString("yyyy-MM-dd") ?? "")" />

        <label for="endDate">End Date:</label>
        <input type="date" id="endDate" name="endDate" value="@((ViewData["EndDate"] as DateTime?)?.ToString("yyyy-MM-dd") ?? "")" />

        <label for="username">Username:</label>
        <input type="text" id="username" name="username" value="@ViewData["Username"]" />

        <label for="project">Project:</label>
        <input type="text" id="project" name="project" value="@ViewData["Project"]" />

        <button type="submit">Filter</button>
    </form>

    <!-- Tabela z danymi -->
    @Html.Partial("_WorklogsTablePartial", Model)

    <h2>Worklog Summary</h2>
    <canvas id="worklogChart"></canvas>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var ctx = document.getElementById('worklogChart').getContext('2d');

            var data = {
                datasets: [{
                    label: 'Hours Spent by Category',
                    data: @Html.Raw(Json.Serialize(new
            {
                Produktywne = Model.ProductiveHours,
                Wsparciowe = Model.HelpDeskHours,
                Rozwojowe = Model.DevelopmentHours,
                Nieproduktywne = Model.InternalHours
            })),
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            };

            var worklogChart = new Chart(ctx, {
                type: 'bar',
                data: data,
                options: {
                    scales: {
                        y: {
                            beginAtZero: true, //
                            ticks: {
                                callback: function (value) {
                                    return value.toFixed(2)
                                }
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed.y !== null) {
                                        label += context.parsed.y.toFixed(2); // Formatowanie etykiet narzędziowych
                                    }
                                    return label;
                                }
                            }
                        }
                    }
                }
            });
        });
    </script>

</body>
</html>